# DORA - Digital Online Resource for Adventurers

## üìã Description du Projet

DORA est une plateforme web compl√®te d√©di√©e √† la simplification des d√©marches de visa et √† l'accompagnement des voyageurs dans leurs aventures internationales. L'application combine un frontend moderne en Next.js avec un backend robuste en Node.js/PostgreSQL, offrant une exp√©rience utilisateur exceptionnelle avec un syst√®me de visa intelligent bas√© sur la nationalit√©.

## üåç SYST√àME DE VISA BAS√â SUR LA NATIONALIT√â

### Principe Fondamental
Le besoin de visa d√©pend enti√®rement de la **nationalit√© du voyageur** et du **pays de destination**. Chaque passeport offre un acc√®s diff√©rent aux pays du monde :

- **Passeport Fran√ßais** : Acc√®s √† ~190 pays sans visa (Japon, Mexique, Maroc, Br√©sil, etc.)
- **Passeport Japonais** : Acc√®s √† ~193 pays sans visa (le plus puissant)
- **Passeport Allemand** : Acc√®s √† ~190 pays sans visa
- **Passeport S√©n√©galais** : Acc√®s √† ~60 pays sans visa
- **Passeport Malien** : Acc√®s √† ~58 pays sans visa

### Structure de Base de Donn√©es pour le Syst√®me de Visa

#### Table: visa_requirements
```sql
CREATE TABLE visa_requirements (
    id SERIAL PRIMARY KEY,
    origin_country_code VARCHAR(3) NOT NULL, -- Code ISO du pays d'origine
    destination_country_code VARCHAR(3) NOT NULL, -- Code ISO du pays de destination
    visa_required BOOLEAN NOT NULL DEFAULT true,
    visa_type VARCHAR(50), -- tourist, business, transit, etc.
    max_stay_days INTEGER, -- Dur√©e maximale de s√©jour sans visa
    processing_time VARCHAR(50), -- D√©lai si visa requis
    cost_usd DECIMAL(10,2), -- Co√ªt en USD
    requirements TEXT[], -- Exigences sp√©cifiques
    notes TEXT, -- Notes additionnelles
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(origin_country_code, destination_country_code, visa_type)
);

-- Index pour optimiser les requ√™tes de visa
CREATE INDEX idx_visa_req_origin_dest ON visa_requirements(origin_country_code, destination_country_code);
CREATE INDEX idx_visa_req_visa_required ON visa_requirements(visa_required);
```

#### Table: bilateral_agreements
```sql
CREATE TABLE bilateral_agreements (
    id SERIAL PRIMARY KEY,
    country_a_code VARCHAR(3) NOT NULL,
    country_b_code VARCHAR(3) NOT NULL,
    agreement_type VARCHAR(50) NOT NULL, -- visa_exemption, reciprocal_visa, etc.
    max_stay_days INTEGER,
    conditions TEXT[], -- Conditions sp√©ciales
    valid_from DATE,
    valid_until DATE,
    is_active BOOLEAN DEFAULT true,
    
    UNIQUE(country_a_code, country_b_code, agreement_type)
);

-- Index pour les accords bilat√©raux
CREATE INDEX idx_bilateral_countries ON bilateral_agreements(country_a_code, country_b_code);
```

#### Table: passport_rankings
```sql
CREATE TABLE passport_rankings (
    id SERIAL PRIMARY KEY,
    country_code VARCHAR(3) UNIQUE NOT NULL,
    visa_free_destinations INTEGER NOT NULL, -- Nombre de pays accessibles sans visa
    visa_on_arrival_destinations INTEGER DEFAULT 0,
    total_destinations INTEGER NOT NULL,
    global_rank INTEGER,
    regional_rank INTEGER,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_passport_rank ON passport_rankings(global_rank);
```

### API Endpoints pour le Syst√®me de Visa

#### üõÇ Visa Requirements Endpoints

**GET /api/visa-check**
Query: `?origin=FR&destination=JP&visa_type=tourist`
```json
{
  "success": true,
  "data": {
    "origin_country": {
      "code": "FR",
      "name": "France",
      "flag": "üá´üá∑"
    },
    "destination_country": {
      "code": "JP", 
      "name": "Japon",
      "flag": "üáØüáµ"
    },
    "visa_required": false,
    "max_stay_days": 90,
    "visa_type": "tourist",
    "requirements": [
      "Passeport valide minimum 6 mois",
      "Billet de retour",
      "Justificatifs financiers"
    ],
    "notes": "Exemption de visa pour s√©jours touristiques jusqu'√† 90 jours",
    "processing_time": null,
    "cost_usd": 0,
    "bilateral_agreement": {
      "type": "visa_exemption",
      "valid_until": "2025-12-31"
    }
  }
}
```

**GET /api/visa-free-destinations/:country_code**
```json
{
  "success": true,
  "data": {
    "country": {
      "code": "FR",
      "name": "France",
      "passport_rank": 3
    },
    "visa_free_count": 190,
    "visa_on_arrival_count": 15,
    "total_accessible": 205,
    "destinations": [
      {
        "country_code": "JP",
        "country_name": "Japon",
        "flag": "üáØüáµ",
        "max_stay_days": 90,
        "continent": "Asie"
      },
      {
        "country_code": "BR",
        "country_name": "Br√©sil", 
        "flag": "üáßüá∑",
        "max_stay_days": 90,
        "continent": "Am√©rique du Sud"
      }
    ]
  }
}
```

**GET /api/passport-power/:country_code**
```json
{
  "success": true,
  "data": {
    "country": {
      "code": "FR",
      "name": "France",
      "flag": "üá´üá∑"
    },
    "global_rank": 3,
    "regional_rank": 2,
    "visa_free_destinations": 190,
    "visa_on_arrival_destinations": 15,
    "visa_required_destinations": 25,
    "total_destinations": 230,
    "power_score": 95.2,
    "comparison": {
      "better_than": 85.5,
      "similar_passports": ["DE", "IT", "ES"],
      "top_passports": ["JP", "SG", "DE"]
    }
  }
}
```

**POST /api/visa-requirements** (Admin)
Headers: `Authorization: Bearer <admin_token>`
```json
{
  "origin_country_code": "SN",
  "destination_country_code": "FR", 
  "visa_required": false,
  "visa_type": "tourist",
  "max_stay_days": 90,
  "requirements": ["Passeport valide", "Billet retour"],
  "notes": "Accord de libre circulation CEDEAO"
}
```

#### üåç Enhanced Countries Endpoints

**GET /api/countries/:code/visa-info**
Query: `?origin_country=FR`
```json
{
  "success": true,
  "data": {
    "country": {
      "code": "JP",
      "name": "Japon",
      "flag": "üáØüáµ"
    },
    "visa_info": {
      "visa_required": false,
      "max_stay_days": 90,
      "processing_time": null,
      "cost_usd": 0,
      "requirements": ["Passeport valide 6 mois", "Billet retour"],
      "entry_points": ["A√©roports internationaux", "Ports maritimes"],
      "restrictions": ["Pas d'activit√© r√©mun√©r√©e"],
      "extensions_possible": true,
      "multiple_entries": true
    },
    "travel_advisory": {
      "level": "low",
      "last_updated": "2024-01-15",
      "notes": "Aucune restriction particuli√®re"
    }
  }
}
```

### Logique M√©tier pour le Syst√®me de Visa

#### Service: VisaRequirementService
```typescript
interface VisaCheckRequest {
  originCountry: string;
  destinationCountry: string;
  visaType?: 'tourist' | 'business' | 'transit' | 'student' | 'work';
  stayDuration?: number;
}

interface VisaCheckResponse {
  visaRequired: boolean;
  maxStayDays?: number;
  processingTime?: string;
  costUSD?: number;
  requirements: string[];
  bilateralAgreement?: {
    type: string;
    validUntil?: string;
  };
  notes?: string;
}

class VisaRequirementService {
  async checkVisaRequirement(request: VisaCheckRequest): Promise<VisaCheckResponse> {
    // 1. V√©rifier les accords bilat√©raux
    const bilateralAgreement = await this.checkBilateralAgreement(
      request.originCountry, 
      request.destinationCountry
    );
    
    if (bilateralAgreement && bilateralAgreement.isActive) {
      return {
        visaRequired: false,
        maxStayDays: bilateralAgreement.maxStayDays,
        requirements: bilateralAgreement.conditions,
        bilateralAgreement: {
          type: bilateralAgreement.agreementType,
          validUntil: bilateralAgreement.validUntil
        }
      };
    }
    
    // 2. V√©rifier les exigences de visa standard
    const visaReq = await this.getVisaRequirement(
      request.originCountry,
      request.destinationCountry,
      request.visaType || 'tourist'
    );
    
    return {
      visaRequired: visaReq.visaRequired,
      maxStayDays: visaReq.maxStayDays,
      processingTime: visaReq.processingTime,
      costUSD: visaReq.costUSD,
      requirements: visaReq.requirements,
      notes: visaReq.notes
    };
  }
  
  async getVisaFreeDestinations(countryCode: string): Promise<Country[]> {
    // Retourne tous les pays accessibles sans visa
    const query = `
      SELECT DISTINCT d.* FROM countries d
      JOIN visa_requirements vr ON d.code = vr.destination_country_code
      WHERE vr.origin_country_code = $1 AND vr.visa_required = false
      UNION
      SELECT DISTINCT d.* FROM countries d
      JOIN bilateral_agreements ba ON (
        (ba.country_a_code = $1 AND ba.country_b_code = d.code) OR
        (ba.country_b_code = $1 AND ba.country_a_code = d.code)
      )
      WHERE ba.agreement_type = 'visa_exemption' AND ba.is_active = true
    `;
    
    return await this.db.query(query, [countryCode]);
  }
  
  async calculatePassportPower(countryCode: string): Promise<PassportPower> {
    const visaFreeCount = await this.countVisaFreeDestinations(countryCode);
    const visaOnArrivalCount = await this.countVisaOnArrivalDestinations(countryCode);
    const totalDestinations = await this.getTotalDestinations();
    
    const powerScore = ((visaFreeCount + visaOnArrivalCount) / totalDestinations) * 100;
    
    return {
      globalRank: await this.calculateGlobalRank(powerScore),
      visaFreeDestinations: visaFreeCount,
      visaOnArrivalDestinations: visaOnArrivalCount,
      totalDestinations,
      powerScore
    };
  }
}
```

### Accords Sp√©ciaux et Exemptions

#### Exemples d'Accords Bilat√©raux/Multilat√©raux

**Union Europ√©enne (Espace Schengen)**
```sql
INSERT INTO bilateral_agreements (country_a_code, country_b_code, agreement_type, max_stay_days, conditions) VALUES
('FR', 'DE', 'schengen_agreement', 90, ARRAY['Carte d''identit√© ou passeport valide']),
('FR', 'IT', 'schengen_agreement', 90, ARRAY['Carte d''identit√© ou passeport valide']),
('FR', 'ES', 'schengen_agreement', 90, ARRAY['Carte d''identit√© ou passeport valide']);
```

**CEDEAO (Afrique de l'Ouest)**
```sql
INSERT INTO bilateral_agreements (country_a_code, country_b_code, agreement_type, max_stay_days, conditions) VALUES
('SN', 'ML', 'ecowas_agreement', 90, ARRAY['Carte d''identit√© CEDEAO']),
('SN', 'CI', 'ecowas_agreement', 90, ARRAY['Carte d''identit√© CEDEAO']),
('SN', 'BF', 'ecowas_agreement', 90, ARRAY['Carte d''identit√© CEDEAO']);
```

**Accords France-Afrique**
```sql
INSERT INTO bilateral_agreements (country_a_code, country_b_code, agreement_type, max_stay_days, conditions) VALUES
('FR', 'SN', 'bilateral_exemption', 90, ARRAY['Passeport valide', 'Justificatifs de s√©jour']),
('FR', 'MA', 'bilateral_exemption', 90, ARRAY['Passeport valide', 'Billet retour']),
('FR', 'TN', 'bilateral_exemption', 90, ARRAY['Passeport valide', 'Billet retour']);
```

### Frontend Integration

#### Composant: VisaChecker
```typescript
interface VisaCheckerProps {
  userNationality?: string;
  destinationCountry?: string;
  onVisaCheckResult?: (result: VisaCheckResponse) => void;
}

const VisaChecker: React.FC<VisaCheckerProps> = ({
  userNationality,
  destinationCountry,
  onVisaCheckResult
}) => {
  const [visaResult, setVisaResult] = useState<VisaCheckResponse | null>(null);
  
  const checkVisaRequirement = async () => {
    if (!userNationality || !destinationCountry) return;
    
    try {
      const response = await fetch(`/api/visa-check?origin=${userNationality}&destination=${destinationCountry}`);
      const result = await response.json();
      
      if (result.success) {
        setVisaResult(result.data);
        onVisaCheckResult?.(result.data);
      }
    } catch (error) {
      console.error('Erreur lors de la v√©rification du visa:', error);
    }
  };
  
  return (
    <div className="visa-checker">
      {visaResult && (
        <div className={`visa-result ${visaResult.visaRequired ? 'visa-required' : 'visa-free'}`}>
          <div className="visa-status">
            {visaResult.visaRequired ? (
              <div className="flex items-center text-red-600">
                <AlertCircle className="h-5 w-5 mr-2" />
                Visa requis
              </div>
            ) : (
              <div className="flex items-center text-green-600">
                <CheckCircle className="h-5 w-5 mr-2" />
                Aucun visa requis
              </div>
            )}
          </div>
          
          {visaResult.maxStayDays && (
            <p className="text-sm text-muted-foreground">
              S√©jour autoris√© : {visaResult.maxStayDays} jours maximum
            </p>
          )}
          
          {visaResult.processingTime && (
            <p className="text-sm">
              D√©lai de traitement : {visaResult.processingTime}
            </p>
          )}
          
          {visaResult.costUSD && visaResult.costUSD > 0 && (
            <p className="text-sm font-medium">
              Co√ªt : {visaResult.costUSD} USD
            </p>
          )}
        </div>
      )}
    </div>
  );
};
```

### Donn√©es de R√©f√©rence

#### Script de Population des Donn√©es de Visa
```javascript
// Script pour peupler la base avec les donn√©es de visa r√©elles
const populateVisaData = async () => {
  // Donn√©es pour passeport fran√ßais (exemple)
  const frenchPassportData = [
    { destination: 'JP', visaRequired: false, maxStay: 90 }, // Japon
    { destination: 'US', visaRequired: true, processingTime: '10-15 jours', cost: 160 }, // √âtats-Unis
    { destination: 'BR', visaRequired: false, maxStay: 90 }, // Br√©sil
    { destination: 'CN', visaRequired: true, processingTime: '5-10 jours', cost: 126 }, // Chine
    { destination: 'IN', visaRequired: true, processingTime: '3-5 jours', cost: 25 }, // Inde (e-visa)
    { destination: 'RU', visaRequired: true, processingTime: '10-20 jours', cost: 50 }, // Russie
    // ... 190+ destinations
  ];
  
  for (const data of frenchPassportData) {
    await db.query(`
      INSERT INTO visa_requirements (origin_country_code, destination_country_code, visa_required, max_stay_days, processing_time, cost_usd)
      VALUES ('FR', $1, $2, $3, $4, $5)
      ON CONFLICT (origin_country_code, destination_country_code, visa_type) DO UPDATE SET
        visa_required = EXCLUDED.visa_required,
        max_stay_days = EXCLUDED.max_stay_days,
        processing_time = EXCLUDED.processing_time,
        cost_usd = EXCLUDED.cost_usd,
        last_updated = CURRENT_TIMESTAMP
    `, [data.destination, data.visaRequired, data.maxStay, data.processingTime, data.cost]);
  }
};
```

### Mise √† Jour et Maintenance

#### Endpoint de Mise √† Jour des Donn√©es
**POST /api/admin/visa-data/update**
Headers: `Authorization: Bearer <admin_token>`
```json
{
  "source": "henley_passport_index", // Source des donn√©es
  "data": [
    {
      "origin_country": "FR",
      "updates": [
        {
          "destination_country": "JP",
          "visa_required": false,
          "max_stay_days": 90,
          "last_verified": "2024-01-15"
        }
      ]
    }
  ]
}
```

#### Syst√®me d'Alertes pour Changements
```typescript
interface VisaChangeAlert {
  originCountry: string;
  destinationCountry: string;
  changeType: 'visa_requirement_changed' | 'agreement_expired' | 'new_agreement';
  oldValue: any;
  newValue: any;
  effectiveDate: string;
  source: string;
}

// Notifier les utilisateurs des changements affectant leurs voyages
const notifyVisaChanges = async (changes: VisaChangeAlert[]) => {
  for (const change of changes) {
    const affectedUsers = await getUsersByNationality(change.originCountry);
    
    for (const user of affectedUsers) {
      await sendNotification(user.id, {
        type: 'visa_requirement_change',
        title: `Changement visa ${change.destinationCountry}`,
        message: `Les exigences de visa pour ${change.destinationCountry} ont chang√©.`,
        data: change
      });
    }
  }
};
```

Ce syst√®me de visa bas√© sur la nationalit√© permet √† DORA de fournir des informations pr√©cises et personnalis√©es √† chaque utilisateur selon son passeport, rendant l'exp√©rience vraiment adapt√©e √† sa situation r√©elle de voyage.