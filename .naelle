# DORA - Sp√©cifications Backend Compl√®tes

## üìã PROMPT POUR CR√âATION BACKEND

Ce document sert de **prompt complet** pour cr√©er un backend Node.js/PostgreSQL 100% compatible avec le frontend DORA existant.

## üéØ OBJECTIFS DU BACKEND

### Architecture Technique
- **Framework**: Node.js avec Express.js
- **Base de donn√©es**: PostgreSQL avec Prisma ORM
- **Authentification**: JWT avec bcrypt
- **Validation**: Joi ou Zod
- **Documentation**: Swagger/OpenAPI
- **Tests**: Jest + Supertest
- **D√©ploiement**: Docker + Docker Compose

### Initialisation Automatique
- **Cr√©ation automatique** de toutes les tables
- **Insertion de donn√©es de test** : minimum 10 enregistrements par table
- **Seeds complets** pour d√©veloppement et d√©monstration
- **Migrations versionn√©es** pour √©volution du sch√©ma

## üóÑÔ∏è STRUCTURE DE BASE DE DONN√âES POSTGRESQL

### 1. Table `users`
```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    nationality VARCHAR(3) NOT NULL, -- Code ISO pays
    avatar_url TEXT,
    phone VARCHAR(50),
    date_of_birth DATE,
    current_location VARCHAR(255),
    preferred_language VARCHAR(5) DEFAULT 'fr',
    preferred_currency VARCHAR(3) DEFAULT 'EUR',
    email_verified BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    last_login TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Index pour performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_nationality ON users(nationality);
CREATE INDEX idx_users_role ON users(role);
```

### 2. Table `countries`
```sql
CREATE TABLE countries (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(3) UNIQUE NOT NULL, -- Code ISO
    flag_emoji VARCHAR(10) NOT NULL,
    continent VARCHAR(100) NOT NULL,
    capital VARCHAR(255) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    languages TEXT[], -- Array de langues
    timezone VARCHAR(100),
    calling_code VARCHAR(10),
    description TEXT,
    climate TEXT,
    best_time_to_visit VARCHAR(100),
    safety_level INTEGER DEFAULT 3 CHECK (safety_level BETWEEN 1 AND 5),
    cost_of_living INTEGER DEFAULT 3 CHECK (cost_of_living BETWEEN 1 AND 5),
    internet_quality INTEGER DEFAULT 3 CHECK (internet_quality BETWEEN 1 AND 5),
    healthcare_quality INTEGER DEFAULT 3 CHECK (healthcare_quality BETWEEN 1 AND 5),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_countries_code ON countries(code);
CREATE INDEX idx_countries_continent ON countries(continent);
```

### 3. Table `visa_requirements` (SYST√àME BAS√â SUR LA NATIONALIT√â)
```sql
CREATE TABLE visa_requirements (
    id SERIAL PRIMARY KEY,
    origin_country_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    destination_country_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    visa_required BOOLEAN NOT NULL DEFAULT true,
    visa_type VARCHAR(50) DEFAULT 'tourist', -- tourist, business, transit, student, work
    max_stay_days INTEGER, -- Dur√©e maximale sans visa
    processing_time_min INTEGER, -- D√©lai minimum en jours
    processing_time_max INTEGER, -- D√©lai maximum en jours
    cost_usd DECIMAL(10,2) DEFAULT 0,
    cost_local_currency DECIMAL(10,2),
    local_currency VARCHAR(3),
    requirements TEXT[], -- Exigences sp√©cifiques
    documents_required TEXT[], -- Documents requis
    notes TEXT,
    is_reciprocal BOOLEAN DEFAULT false, -- Accord r√©ciproque
    valid_from DATE,
    valid_until DATE,
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(origin_country_code, destination_country_code, visa_type)
);

CREATE INDEX idx_visa_req_origin ON visa_requirements(origin_country_code);
CREATE INDEX idx_visa_req_destination ON visa_requirements(destination_country_code);
CREATE INDEX idx_visa_req_required ON visa_requirements(visa_required);
```

### 4. Table `bilateral_agreements`
```sql
CREATE TABLE bilateral_agreements (
    id SERIAL PRIMARY KEY,
    country_a_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    country_b_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    agreement_name VARCHAR(255) NOT NULL, -- Schengen, CEDEAO, etc.
    agreement_type VARCHAR(50) NOT NULL, -- visa_exemption, reciprocal_visa, etc.
    max_stay_days INTEGER,
    conditions TEXT[],
    member_countries TEXT[], -- Pour accords multilat√©raux
    valid_from DATE NOT NULL,
    valid_until DATE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(country_a_code, country_b_code, agreement_type)
);

CREATE INDEX idx_bilateral_countries ON bilateral_agreements(country_a_code, country_b_code);
CREATE INDEX idx_bilateral_active ON bilateral_agreements(is_active);
```

### 5. Table `passport_rankings`
```sql
CREATE TABLE passport_rankings (
    id SERIAL PRIMARY KEY,
    country_code VARCHAR(3) UNIQUE NOT NULL REFERENCES countries(code),
    visa_free_destinations INTEGER NOT NULL DEFAULT 0,
    visa_on_arrival_destinations INTEGER DEFAULT 0,
    eta_destinations INTEGER DEFAULT 0, -- Electronic Travel Authorization
    visa_required_destinations INTEGER DEFAULT 0,
    total_destinations INTEGER NOT NULL DEFAULT 0,
    global_rank INTEGER,
    regional_rank INTEGER,
    mobility_score DECIMAL(5,2), -- Score de mobilit√©
    ranking_year INTEGER DEFAULT EXTRACT(YEAR FROM CURRENT_DATE),
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_passport_rank ON passport_rankings(global_rank);
CREATE INDEX idx_passport_score ON passport_rankings(mobility_score DESC);
```

### 6. Table `visa_applications` (D√âMARCHES MULTIPLES)
```sql
CREATE TABLE visa_applications (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    country_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    application_type VARCHAR(50) NOT NULL, -- tourist, student, worker, resident
    status VARCHAR(50) DEFAULT 'draft', -- draft, in_progress, submitted, processing, approved, rejected, expired
    current_step INTEGER DEFAULT 1,
    total_steps INTEGER DEFAULT 5,
    progress_percentage INTEGER DEFAULT 0 CHECK (progress_percentage BETWEEN 0 AND 100),
    
    -- Donn√©es du formulaire (JSON flexible)
    personal_info JSONB DEFAULT '{}',
    travel_info JSONB DEFAULT '{}',
    documents_info JSONB DEFAULT '{}',
    additional_info JSONB DEFAULT '{}',
    
    -- Dates importantes
    started_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    submitted_at TIMESTAMPTZ,
    expected_decision_date DATE,
    decision_date DATE,
    visa_expiry_date DATE,
    
    -- Co√ªts
    estimated_cost DECIMAL(10,2),
    actual_cost DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'EUR',
    
    -- Suivi
    reference_number VARCHAR(100),
    consulate_location VARCHAR(255),
    appointment_date TIMESTAMPTZ,
    notes TEXT,
    admin_notes TEXT,
    
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_visa_apps_user ON visa_applications(user_id);
CREATE INDEX idx_visa_apps_status ON visa_applications(status);
CREATE INDEX idx_visa_apps_country ON visa_applications(country_code);
CREATE INDEX idx_visa_apps_type ON visa_applications(application_type);
```

### 7. Table `visa_documents`
```sql
CREATE TABLE visa_documents (
    id SERIAL PRIMARY KEY,
    application_id INTEGER NOT NULL REFERENCES visa_applications(id) ON DELETE CASCADE,
    document_type VARCHAR(100) NOT NULL, -- passport, photo, bank_statement, etc.
    document_name VARCHAR(255) NOT NULL,
    file_url TEXT,
    file_size INTEGER,
    mime_type VARCHAR(100),
    status VARCHAR(50) DEFAULT 'pending', -- pending, approved, rejected, expired
    is_required BOOLEAN DEFAULT true,
    expiry_date DATE,
    notes TEXT,
    uploaded_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    verified_at TIMESTAMPTZ,
    verified_by INTEGER REFERENCES users(id)
);

CREATE INDEX idx_visa_docs_application ON visa_documents(application_id);
CREATE INDEX idx_visa_docs_status ON visa_documents(status);
```

### 8. Table `community_posts`
```sql
CREATE TABLE community_posts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    country_id INTEGER REFERENCES countries(id),
    title VARCHAR(500) NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT,
    post_type VARCHAR(50) DEFAULT 'experience', -- experience, question, tip, review
    status VARCHAR(50) DEFAULT 'pending', -- pending, approved, rejected, archived
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    tags TEXT[] DEFAULT '{}',
    
    -- Engagement
    likes_count INTEGER DEFAULT 0,
    dislikes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    views_count INTEGER DEFAULT 0,
    shares_count INTEGER DEFAULT 0,
    
    -- Mod√©ration
    approved_at TIMESTAMPTZ,
    approved_by INTEGER REFERENCES users(id),
    rejection_reason TEXT,
    
    -- M√©tadonn√©es
    language VARCHAR(5) DEFAULT 'fr',
    is_featured BOOLEAN DEFAULT false,
    is_pinned BOOLEAN DEFAULT false,
    
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_posts_user ON community_posts(user_id);
CREATE INDEX idx_posts_country ON community_posts(country_id);
CREATE INDEX idx_posts_status ON community_posts(status);
CREATE INDEX idx_posts_created ON community_posts(created_at DESC);
CREATE INDEX idx_posts_featured ON community_posts(is_featured);
```

### 9. Table `post_interactions`
```sql
CREATE TABLE post_interactions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    post_id INTEGER NOT NULL REFERENCES community_posts(id) ON DELETE CASCADE,
    interaction_type VARCHAR(20) NOT NULL, -- like, dislike, view, share, report
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(user_id, post_id, interaction_type)
);

CREATE INDEX idx_interactions_user ON post_interactions(user_id);
CREATE INDEX idx_interactions_post ON post_interactions(post_id);
CREATE INDEX idx_interactions_type ON post_interactions(interaction_type);
```

### 10. Table `post_comments`
```sql
CREATE TABLE post_comments (
    id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL REFERENCES community_posts(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    parent_comment_id INTEGER REFERENCES post_comments(id), -- Pour r√©ponses
    content TEXT NOT NULL,
    likes_count INTEGER DEFAULT 0,
    is_approved BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_comments_post ON post_comments(post_id);
CREATE INDEX idx_comments_user ON post_comments(user_id);
CREATE INDEX idx_comments_parent ON post_comments(parent_comment_id);
```

### 11. Table `country_images` (GALERIE PROFESSIONNELLE)
```sql
CREATE TABLE country_images (
    id SERIAL PRIMARY KEY,
    country_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    category VARCHAR(50) NOT NULL, -- tourist_site, university, restaurant, hotel, general, culture, nature
    subcategory VARCHAR(100), -- monument, museum, beach, mountain, etc.
    title VARCHAR(255) NOT NULL,
    description TEXT,
    image_url TEXT NOT NULL,
    thumbnail_url TEXT,
    alt_text VARCHAR(500),
    
    -- M√©tadonn√©es
    photographer VARCHAR(255),
    source VARCHAR(100), -- unsplash, pexels, custom, etc.
    license VARCHAR(100),
    tags TEXT[] DEFAULT '{}',
    
    -- G√©olocalisation
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    location_name VARCHAR(255),
    
    -- Qualit√© et tri
    quality_score INTEGER DEFAULT 5 CHECK (quality_score BETWEEN 1 AND 10),
    is_featured BOOLEAN DEFAULT false,
    display_order INTEGER DEFAULT 0,
    
    -- Engagement
    views_count INTEGER DEFAULT 0,
    likes_count INTEGER DEFAULT 0,
    
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_country_images_country ON country_images(country_code);
CREATE INDEX idx_country_images_category ON country_images(category);
CREATE INDEX idx_country_images_featured ON country_images(is_featured);
CREATE INDEX idx_country_images_quality ON country_images(quality_score DESC);
CREATE INDEX idx_country_images_order ON country_images(display_order);
```

### 12. Table `integration_services` (SERVICES D'INT√âGRATION)
```sql
CREATE TABLE integration_services (
    id SERIAL PRIMARY KEY,
    country_code VARCHAR(3) NOT NULL REFERENCES countries(code),
    service_type VARCHAR(50) NOT NULL, -- restaurant, hotel, hospital, bank, transport, etc.
    category VARCHAR(100), -- essential, leisure, professional, educational
    name VARCHAR(255) NOT NULL,
    description TEXT,
    address TEXT,
    city VARCHAR(255),
    postal_code VARCHAR(20),
    
    -- Contact
    phone VARCHAR(50),
    email VARCHAR(255),
    website TEXT,
    
    -- G√©olocalisation
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    
    -- √âvaluation
    rating DECIMAL(3,2) DEFAULT 0 CHECK (rating BETWEEN 0 AND 5),
    reviews_count INTEGER DEFAULT 0,
    
    -- Informations pratiques
    opening_hours JSONB, -- Horaires par jour
    price_range INTEGER CHECK (price_range BETWEEN 1 AND 4), -- ‚Ç¨, $$, $$$, $$$$
    languages_spoken TEXT[],
    accepts_foreigners BOOLEAN DEFAULT true,
    
    -- M√©tadonn√©es
    image_url TEXT,
    tags TEXT[] DEFAULT '{}',
    is_verified BOOLEAN DEFAULT false,
    is_featured BOOLEAN DEFAULT false,
    
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_integration_country ON integration_services(country_code);
CREATE INDEX idx_integration_type ON integration_services(service_type);
CREATE INDEX idx_integration_category ON integration_services(category);
CREATE INDEX idx_integration_location ON integration_services(latitude, longitude);
CREATE INDEX idx_integration_rating ON integration_services(rating DESC);
```

### 13. Table `user_locations`
```sql
CREATE TABLE user_locations (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    country_code VARCHAR(3) REFERENCES countries(code),
    city VARCHAR(255),
    address TEXT,
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    is_current BOOLEAN DEFAULT false,
    location_type VARCHAR(50) DEFAULT 'residence', -- residence, work, temporary
    detected_from VARCHAR(50), -- browser, manual, gps
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_user_locations_user ON user_locations(user_id);
CREATE INDEX idx_user_locations_current ON user_locations(user_id, is_current);
```

### 14. Table `user_preferences`
```sql
CREATE TABLE user_preferences (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    preference_key VARCHAR(100) NOT NULL,
    preference_value TEXT,
    data_type VARCHAR(20) DEFAULT 'string', -- string, number, boolean, json
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(user_id, preference_key)
);

CREATE INDEX idx_user_prefs_user ON user_preferences(user_id);
```

### 15. Table `system_settings`
```sql
CREATE TABLE system_settings (
    id SERIAL PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    data_type VARCHAR(20) DEFAULT 'string',
    description TEXT,
    is_public BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
```

## üöÄ API ENDPOINTS COMPLETS

### Authentication & Users
```
POST   /api/auth/register          # Inscription
POST   /api/auth/login             # Connexion
POST   /api/auth/logout            # D√©connexion
GET    /api/auth/me                # Profil utilisateur
PUT    /api/auth/me                # Mise √† jour profil
POST   /api/auth/forgot-password   # Mot de passe oubli√©
POST   /api/auth/reset-password    # R√©initialisation
POST   /api/auth/verify-email      # V√©rification email
```

### Visa System (BAS√â SUR LA NATIONALIT√â)
```
GET    /api/visa/check                    # V√©rification visa
       ?origin=FR&destination=JP&type=tourist
GET    /api/visa/destinations/:country    # Destinations sans visa
GET    /api/visa/passport-power/:country  # Puissance passeport
GET    /api/visa/agreements               # Accords bilat√©raux
GET    /api/visa/rankings                 # Classement passeports
```

### Visa Applications (D√âMARCHES MULTIPLES)
```
GET    /api/applications                  # Liste des d√©marches utilisateur
POST   /api/applications                  # Nouvelle d√©marche
GET    /api/applications/:id              # D√©tail d√©marche
PUT    /api/applications/:id              # Mise √† jour d√©marche
DELETE /api/applications/:id              # Supprimer d√©marche
POST   /api/applications/:id/documents    # Upload document
GET    /api/applications/:id/progress     # Progression
PUT    /api/applications/:id/step         # √âtape suivante
```

### Countries & Images
```
GET    /api/countries                     # Liste pays
GET    /api/countries/:code               # D√©tail pays
GET    /api/countries/:code/images        # Images pays
       ?category=tourist_site&limit=10
POST   /api/countries/:code/images        # Ajouter image (admin)
PUT    /api/countries/:code/images/:id    # Modifier image (admin)
```

### Community
```
GET    /api/community/posts               # Posts communaut√©
POST   /api/community/posts               # Cr√©er post
GET    /api/community/posts/:id           # D√©tail post
PUT    /api/community/posts/:id           # Modifier post
DELETE /api/community/posts/:id           # Supprimer post
POST   /api/community/posts/:id/like      # Liker post
POST   /api/community/posts/:id/comment   # Commenter
GET    /api/community/posts/:id/comments  # Commentaires
```

### Integration Services
```
GET    /api/integration/services          # Services d'int√©gration
       ?country=FR&type=restaurant&lat=48.8566&lng=2.3522&radius=5000
GET    /api/integration/services/:id      # D√©tail service
POST   /api/integration/services          # Ajouter service (admin)
GET    /api/integration/categories        # Cat√©gories services
```

### User Location
```
GET    /api/users/location                # Localisation utilisateur
POST   /api/users/location                # D√©finir localisation
PUT    /api/users/location                # Mettre √† jour localisation
```

### Admin
```
GET    /api/admin/stats                   # Statistiques
GET    /api/admin/users                   # Gestion utilisateurs
GET    /api/admin/posts                   # Mod√©ration posts
PUT    /api/admin/posts/:id/approve       # Approuver post
PUT    /api/admin/posts/:id/reject        # Rejeter post
```

## üìä DONN√âES DE SEED (MINIMUM 10 PAR TABLE)

### Pays (15+ pays avec donn√©es compl√®tes)
```javascript
const countries = [
  {
    name: "France", code: "FR", flag: "üá´üá∑", continent: "Europe",
    capital: "Paris", currency: "EUR", languages: ["fr"],
    description: "Pays de l'art, de la culture et de la gastronomie...",
    safety_level: 4, cost_of_living: 4, internet_quality: 5
  },
  {
    name: "Japon", code: "JP", flag: "üáØüáµ", continent: "Asie",
    capital: "Tokyo", currency: "JPY", languages: ["ja"],
    description: "M√©lange harmonieux de tradition et modernit√©...",
    safety_level: 5, cost_of_living: 4, internet_quality: 5
  },
  // ... 13+ autres pays
];
```

### Exigences de Visa (100+ combinaisons)
```javascript
const visaRequirements = [
  // Fran√ßais vers autres pays
  { origin: "FR", destination: "JP", visa_required: false, max_stay_days: 90 },
  { origin: "FR", destination: "US", visa_required: true, cost_usd: 160, processing_time_min: 10 },
  { origin: "FR", destination: "CN", visa_required: true, cost_usd: 126, processing_time_min: 5 },
  
  // Japonais vers autres pays (plus de libert√©)
  { origin: "JP", destination: "FR", visa_required: false, max_stay_days: 90 },
  { origin: "JP", destination: "US", visa_required: false, max_stay_days: 90 },
  
  // S√©n√©galais (moins de libert√©)
  { origin: "SN", destination: "FR", visa_required: true, cost_usd: 80 },
  { origin: "SN", destination: "ML", visa_required: false }, // CEDEAO
  
  // ... 90+ autres combinaisons
];
```

### Accords Bilat√©raux
```javascript
const bilateralAgreements = [
  {
    country_a: "FR", country_b: "DE", agreement_name: "Schengen",
    agreement_type: "visa_exemption", max_stay_days: 90,
    member_countries: ["FR", "DE", "IT", "ES", "NL", "BE", ...]
  },
  {
    country_a: "SN", country_b: "ML", agreement_name: "CEDEAO",
    agreement_type: "free_movement", max_stay_days: 90,
    member_countries: ["SN", "ML", "CI", "BF", "GH", ...]
  }
];
```

### Images par Pays (50+ images)
```javascript
const countryImages = [
  {
    country_code: "FR", category: "tourist_site", subcategory: "monument",
    title: "Tour Eiffel", description: "Symbole de Paris",
    image_url: "https://images.unsplash.com/photo-1549144511-f099e773c147",
    photographer: "John Doe", quality_score: 9, is_featured: true
  },
  {
    country_code: "JP", category: "nature", subcategory: "mountain",
    title: "Mont Fuji", description: "Montagne sacr√©e du Japon",
    image_url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96",
    quality_score: 10, is_featured: true
  }
  // ... 48+ autres images
];
```

### Services d'Int√©gration (100+ services)
```javascript
const integrationServices = [
  {
    country_code: "FR", service_type: "restaurant", category: "essential",
    name: "Le Petit Bistrot", description: "Restaurant fran√ßais traditionnel",
    address: "123 Rue de la Paix, Paris", phone: "+33123456789",
    latitude: 48.8566, longitude: 2.3522, rating: 4.5,
    price_range: 2, languages_spoken: ["fr", "en"]
  },
  {
    country_code: "FR", service_type: "bank", category: "essential",
    name: "BNP Paribas Ch√¢telet", description: "Agence bancaire centrale",
    address: "456 Rue de Rivoli, Paris", phone: "+33987654321",
    latitude: 48.8584, longitude: 2.3470, rating: 4.0,
    accepts_foreigners: true, is_verified: true
  }
  // ... 98+ autres services
];
```

## üîß CONFIGURATION TECHNIQUE

### Package.json Backend
```json
{
  "name": "dora-backend",
  "version": "1.0.0",
  "scripts": {
    "dev": "nodemon src/server.js",
    "start": "node src/server.js",
    "migrate": "npx prisma migrate dev",
    "seed": "node src/seeds/index.js",
    "test": "jest",
    "build": "npm run migrate && npm run seed"
  },
  "dependencies": {
    "express": "^4.18.2",
    "prisma": "^5.0.0",
    "@prisma/client": "^5.0.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "joi": "^17.9.0",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.7.0",
    "multer": "^1.4.5",
    "dotenv": "^16.0.3",
    "pg": "^8.11.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22",
    "jest": "^29.5.0",
    "supertest": "^6.3.3"
  }
}
```

### Variables d'Environnement
```env
# Base de donn√©es
DATABASE_URL="postgresql://user:password@localhost:5432/dora_db"

# JWT
JWT_SECRET="your-super-secret-jwt-key-here"
JWT_EXPIRES_IN="7d"

# Serveur
PORT=3001
NODE_ENV="development"

# CORS
FRONTEND_URL="http://localhost:3000"

# Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH="./uploads"

# Rate Limiting
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=100

# Email (optionnel)
SMTP_HOST="smtp.gmail.com"
SMTP_PORT=587
SMTP_USER="your-email@gmail.com"
SMTP_PASS="your-app-password"
```

### Structure des Dossiers
```
backend/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visaController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ countryController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ communityController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ applicationController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integrationController.js
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rateLimiter.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.js
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visa.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ countries.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ community.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ applications.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ integration.js
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visaService.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ locationService.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ imageService.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ constants.js
‚îÇ   ‚îú‚îÄ‚îÄ seeds/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ countries.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visaRequirements.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ images.js
‚îÇ   ‚îî‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ schema.prisma
‚îÇ   ‚îî‚îÄ‚îÄ migrations/
‚îú‚îÄ‚îÄ tests/
‚îú‚îÄ‚îÄ uploads/
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ Dockerfile
‚îî‚îÄ‚îÄ package.json
```

## üîÑ MISE √Ä JOUR FRONTEND POUR COMPATIBILIT√â

### 1. Service API Am√©lior√©
```typescript
// lib/api.ts - Version am√©lior√©e
class ApiClient {
  private baseURL: string;
  private isBackendAvailable: boolean = true;

  async checkVisaRequirement(origin: string, destination: string, type: string = 'tourist') {
    try {
      if (this.isBackendAvailable) {
        const response = await this.get(`/visa/check?origin=${origin}&destination=${destination}&type=${type}`);
        if (response.success) return response.data;
      }
    } catch (error) {
      console.log('Backend indisponible, utilisation des donn√©es locales');
      this.isBackendAvailable = false;
    }
    
    // Fallback avec logique locale existante
    return this.getLocalVisaRequirement(origin, destination);
  }

  async getCountryImages(countryCode: string, category?: string, limit: number = 10) {
    try {
      if (this.isBackendAvailable) {
        const params = new URLSearchParams();
        if (category) params.append('category', category);
        params.append('limit', limit.toString());
        
        const response = await this.get(`/countries/${countryCode}/images?${params}`);
        if (response.success) return response.data;
      }
    } catch (error) {
      this.isBackendAvailable = false;
    }
    
    // Fallback avec images par d√©faut
    return this.getDefaultImages(countryCode, category);
  }

  async getUserApplications() {
    try {
      if (this.isBackendAvailable) {
        const response = await this.get('/applications');
        if (response.success) return response.data;
      }
    } catch (error) {
      this.isBackendAvailable = false;
    }
    
    // Fallback localStorage
    return JSON.parse(localStorage.getItem('visaApplications') || '[]');
  }

  async createApplication(applicationData: any) {
    try {
      if (this.isBackendAvailable) {
        const response = await this.post('/applications', applicationData);
        if (response.success) return response.data;
      }
    } catch (error) {
      this.isBackendAvailable = false;
    }
    
    // Fallback localStorage
    const applications = JSON.parse(localStorage.getItem('visaApplications') || '[]');
    const newApp = { id: Date.now(), ...applicationData, created_at: new Date().toISOString() };
    applications.push(newApp);
    localStorage.setItem('visaApplications', JSON.stringify(applications));
    return newApp;
  }

  async getIntegrationServices(countryCode: string, type?: string, location?: {lat: number, lng: number}) {
    try {
      if (this.isBackendAvailable) {
        const params = new URLSearchParams({ country: countryCode });
        if (type) params.append('type', type);
        if (location) {
          params.append('lat', location.lat.toString());
          params.append('lng', location.lng.toString());
          params.append('radius', '5000');
        }
        
        const response = await this.get(`/integration/services?${params}`);
        if (response.success) return response.data;
      }
    } catch (error) {
      this.isBackendAvailable = false;
    }
    
    // Fallback avec donn√©es mock√©es
    return this.getMockIntegrationServices(countryCode, type);
  }
}
```

### 2. Hook de G√©olocalisation
```typescript
// hooks/use-location.ts
export const useLocation = () => {
  const [location, setLocation] = useState<{lat: number, lng: number} | null>(null);
  const [country, setCountry] = useState<string | null>(null);
  
  useEffect(() => {
    // Essayer de r√©cup√©rer depuis le backend
    const getUserLocation = async () => {
      try {
        const response = await apiClient.get('/users/location');
        if (response.success && response.data) {
          setLocation({ lat: response.data.latitude, lng: response.data.longitude });
          setCountry(response.data.country_code);
          return;
        }
      } catch (error) {
        console.log('Localisation backend indisponible');
      }
      
      // Fallback g√©olocalisation navigateur
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const newLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            setLocation(newLocation);
            
            // Sauvegarder dans le backend si disponible
            apiClient.post('/users/location', {
              latitude: newLocation.lat,
              longitude: newLocation.lng,
              detected_from: 'browser'
            }).catch(() => {
              // Sauvegarder localement en fallback
              localStorage.setItem('userLocation', JSON.stringify(newLocation));
            });
          },
          (error) => {
            console.log('G√©olocalisation refus√©e, utilisation de la localisation par d√©faut');
            // Localisation par d√©faut (Paris)
            setLocation({ lat: 48.8566, lng: 2.3522 });
            setCountry('FR');
          }
        );
      }
    };
    
    getUserLocation();
  }, []);
  
  return { location, country, setLocation };
};
```

### 3. Service de D√©marches Multiples
```typescript
// lib/services/applicationService.ts
class ApplicationService {
  async getApplications(): Promise<VisaApplication[]> {
    try {
      const response = await apiClient.get('/applications');
      if (response.success) return response.data;
    } catch (error) {
      console.log('Backend indisponible, utilisation des donn√©es locales');
    }
    
    // Fallback localStorage
    return JSON.parse(localStorage.getItem('visaApplications') || '[]');
  }
  
  async createApplication(data: CreateApplicationData): Promise<VisaApplication> {
    const applicationData = {
      country_code: data.countryCode,
      application_type: data.applicationType,
      personal_info: data.personalInfo,
      travel_info: data.travelInfo
    };
    
    try {
      const response = await apiClient.post('/applications', applicationData);
      if (response.success) {
        // Mettre √† jour le cache local
        const applications = await this.getApplications();
        applications.push(response.data);
        localStorage.setItem('visaApplications', JSON.stringify(applications));
        return response.data;
      }
    } catch (error) {
      console.log('Cr√©ation backend √©chou√©e, sauvegarde locale');
    }
    
    // Fallback localStorage
    const newApp: VisaApplication = {
      id: Date.now(),
      ...applicationData,
      status: 'draft',
      current_step: 1,
      total_steps: 5,
      progress_percentage: 0,
      created_at: new Date().toISOString()
    };
    
    const applications = await this.getApplications();
    applications.push(newApp);
    localStorage.setItem('visaApplications', JSON.stringify(applications));
    return newApp;
  }
  
  async updateApplication(id: number, updates: Partial<VisaApplication>): Promise<VisaApplication> {
    try {
      const response = await apiClient.put(`/applications/${id}`, updates);
      if (response.success) return response.data;
    } catch (error) {
      console.log('Mise √† jour backend √©chou√©e, mise √† jour locale');
    }
    
    // Fallback localStorage
    const applications = await this.getApplications();
    const index = applications.findIndex(app => app.id === id);
    if (index !== -1) {
      applications[index] = { ...applications[index], ...updates };
      localStorage.setItem('visaApplications', JSON.stringify(applications));
      return applications[index];
    }
    
    throw new Error('Application non trouv√©e');
  }
}

export const applicationService = new ApplicationService();
```

### 4. Composant de D√©marches Multiples
```typescript
// components/visa/ApplicationsList.tsx
export const ApplicationsList = () => {
  const [applications, setApplications] = useState<VisaApplication[]>([]);
  const { user } = useAuth();
  
  useEffect(() => {
    const loadApplications = async () => {
      const apps = await applicationService.getApplications();
      setApplications(apps);
    };
    
    if (user) {
      loadApplications();
    }
  }, [user]);
  
  const handleCreateNew = async (data: CreateApplicationData) => {
    const newApp = await applicationService.createApplication(data);
    setApplications(prev => [newApp, ...prev]);
    toast.success('Nouvelle d√©marche cr√©√©e !');
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Mes D√©marches de Visa</h2>
        <Button onClick={() => setShowCreateModal(true)}>
          <Plus className="h-4 w-4 mr-2" />
          Nouvelle D√©marche
        </Button>
      </div>
      
      <div className="grid gap-6">
        {applications.map(app => (
          <ApplicationCard 
            key={app.id} 
            application={app}
            onUpdate={(updates) => handleUpdate(app.id, updates)}
          />
        ))}
      </div>
      
      {applications.length === 0 && (
        <EmptyState 
          title="Aucune d√©marche en cours"
          description="Commencez votre premi√®re d√©marche de visa"
          action={<Button onClick={() => setShowCreateModal(true)}>Commencer</Button>}
        />
      )}
    </div>
  );
};
```

## üéØ INSTRUCTIONS FINALES

### Initialisation Automatique
1. **Cr√©er toutes les tables** avec les contraintes et index
2. **Ins√©rer les donn√©es de seed** (minimum 10 par table)
3. **Configurer les relations** entre tables
4. **Tester tous les endpoints** avec des donn√©es r√©elles

### Compatibilit√© Frontend
1. **Respecter exactement** les interfaces TypeScript d√©finies
2. **Maintenir la compatibilit√©** avec le syst√®me de fallback
3. **Pr√©server toute la logique existante** du frontend
4. **Assurer le fonctionnement** m√™me sans backend

### Performance et S√©curit√©
1. **Authentification JWT** s√©curis√©e
2. **Validation stricte** de toutes les entr√©es
3. **Rate limiting** sur toutes les routes
4. **Index de base de donn√©es** optimis√©s
5. **Gestion d'erreurs** compl√®te

### Tests et Documentation
1. **Tests unitaires** pour tous les services
2. **Documentation Swagger** compl√®te
3. **Scripts de d√©ploiement** Docker
4. **Monitoring** et logs

Ce backend doit √™tre **100% compatible** avec le frontend existant et permettre une **transition transparente** entre le mode local et le mode connect√©.