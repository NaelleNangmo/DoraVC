## üîß SP√âCIFICATIONS BACKEND D√âTAILL√âES

### Structure de Base de Donn√©es PostgreSQL

#### Table: users
```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    avatar TEXT,
    nationality VARCHAR(3), -- Code ISO pays
    current_country VARCHAR(3), -- Code ISO pays
    status VARCHAR(20) DEFAULT 'tourist' CHECK (status IN ('tourist', 'worker', 'student', 'resident')),
    preferences JSONB DEFAULT '{}',
    profile JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    is_active BOOLEAN DEFAULT true
);

-- Index pour optimiser les requ√™tes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_status ON users(status);
```

#### Table: countries
```sql
CREATE TABLE countries (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(3) UNIQUE NOT NULL, -- Code ISO
    flag VARCHAR(10) NOT NULL,
    continent VARCHAR(50) NOT NULL,
    capital VARCHAR(255) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    language VARCHAR(255) NOT NULL,
    image TEXT NOT NULL,
    description TEXT NOT NULL,
    visa_required BOOLEAN DEFAULT true,
    processing_time VARCHAR(50) NOT NULL,
    average_cost INTEGER DEFAULT 0,
    popular_season VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_countries_code ON countries(code);
CREATE INDEX idx_countries_continent ON countries(continent);
CREATE INDEX idx_countries_visa_required ON countries(visa_required);
```

#### Table: community_posts
```sql
CREATE TABLE community_posts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    country_id INTEGER REFERENCES countries(id) ON DELETE SET NULL,
    title VARCHAR(500) NOT NULL,
    content TEXT NOT NULL,
    image TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    tags JSONB DEFAULT '[]',
    likes INTEGER DEFAULT 0,
    dislikes INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    views INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_at TIMESTAMP,
    approved_by INTEGER REFERENCES users(id) ON DELETE SET NULL
);

CREATE INDEX idx_posts_user_id ON community_posts(user_id);
CREATE INDEX idx_posts_country_id ON community_posts(country_id);
CREATE INDEX idx_posts_status ON community_posts(status);
CREATE INDEX idx_posts_created_at ON community_posts(created_at);
```

#### Table: post_interactions
```sql
CREATE TABLE post_interactions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    post_id INTEGER REFERENCES community_posts(id) ON DELETE CASCADE,
    interaction_type VARCHAR(20) CHECK (interaction_type IN ('like', 'dislike')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, post_id)
);

CREATE INDEX idx_interactions_user_post ON post_interactions(user_id, post_id);
```

#### Table: visa_applications
```sql
CREATE TABLE visa_applications (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    country_id INTEGER REFERENCES countries(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'submitted', 'processing', 'approved', 'rejected')),
    current_step INTEGER DEFAULT 1,
    total_steps INTEGER DEFAULT 5,
    form_data JSONB DEFAULT '{}',
    documents JSONB DEFAULT '[]',
    notes TEXT,
    submitted_at TIMESTAMP,
    expected_decision TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_visa_apps_user_id ON visa_applications(user_id);
CREATE INDEX idx_visa_apps_status ON visa_applications(status);
```

#### Table: user_profiles
```sql
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    visa_applications JSONB DEFAULT '[]',
    saved_places JSONB DEFAULT '[]',
    integration_progress JSONB DEFAULT '{}',
    travel_history JSONB DEFAULT '[]',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_profiles_user_id ON user_profiles(user_id);
```

#### Table: hotels
```sql
CREATE TABLE hotels (
    id SERIAL PRIMARY KEY,
    country_id INTEGER REFERENCES countries(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    image TEXT NOT NULL,
    location VARCHAR(255) NOT NULL,
    amenities JSONB DEFAULT '[]',
    description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_hotels_country_id ON hotels(country_id);
CREATE INDEX idx_hotels_rating ON hotels(rating);
```

#### Table: restaurants
```sql
CREATE TABLE restaurants (
    id SERIAL PRIMARY KEY,
    country_id INTEGER REFERENCES countries(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    cuisine VARCHAR(100) NOT NULL,
    price_range VARCHAR(10) NOT NULL,
    rating DECIMAL(2,1) NOT NULL,
    image TEXT NOT NULL,
    location VARCHAR(255) NOT NULL,
    average_price DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_restaurants_country_id ON restaurants(country_id);
CREATE INDEX idx_restaurants_cuisine ON restaurants(cuisine);
```

#### Table: tourist_sites
```sql
CREATE TABLE tourist_sites (
    id SERIAL PRIMARY KEY,
    country_id INTEGER REFERENCES countries(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL,
    image TEXT NOT NULL,
    location VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    visit_duration VARCHAR(50) NOT NULL,
    best_time VARCHAR(100) NOT NULL,
    entry_fee DECIMAL(10,2) DEFAULT 0,
    currency VARCHAR(3) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_sites_country_id ON tourist_sites(country_id);
CREATE INDEX idx_sites_category ON tourist_sites(category);
```

### API Endpoints D√©taill√©s

#### üîê Authentication Endpoints

**POST /api/auth/register**
```json
{
  "name": "string",
  "email": "string",
  "password": "string",
  "nationality": "string (optional)",
  "status": "tourist|worker|student|resident (optional)"
}
```
Response: `{ "success": true, "data": { "user": UserObject, "token": "jwt_token" } }`

**POST /api/auth/login**
```json
{
  "email": "string",
  "password": "string"
}
```
Response: `{ "success": true, "data": { "user": UserObject, "token": "jwt_token" } }`

**POST /api/auth/logout**
Headers: `Authorization: Bearer <token>`
Response: `{ "success": true, "message": "Logged out successfully" }`

**GET /api/auth/me**
Headers: `Authorization: Bearer <token>`
Response: `{ "success": true, "data": UserObject }`

#### üë§ Users Endpoints

**GET /api/users**
Headers: `Authorization: Bearer <admin_token>`
Query: `?page=1&limit=10&role=user&status=active`
Response: `{ "success": true, "data": UserObject[], "pagination": PaginationObject }`

**GET /api/users/:id**
Headers: `Authorization: Bearer <token>`
Response: `{ "success": true, "data": UserObject }`

**PUT /api/users/:id**
Headers: `Authorization: Bearer <token>`
```json
{
  "name": "string (optional)",
  "avatar": "string (optional)",
  "status": "tourist|worker|student|resident (optional)",
  "preferences": "object (optional)",
  "profile": "object (optional)"
}
```
Response: `{ "success": true, "data": UserObject }`

**DELETE /api/users/:id**
Headers: `Authorization: Bearer <admin_token>`
Response: `{ "success": true, "message": "User deleted successfully" }`

#### üåç Countries Endpoints

**GET /api/countries**
Query: `?continent=Europe&visa_required=true&search=france&sort=name&order=asc&page=1&limit=20`
Response: `{ "success": true, "data": CountryObject[], "pagination": PaginationObject }`

**GET /api/countries/:code**
Response: `{ "success": true, "data": CountryObject }`

**POST /api/countries**
Headers: `Authorization: Bearer <admin_token>`
```json
{
  "name": "string",
  "code": "string",
  "flag": "string",
  "continent": "string",
  "capital": "string",
  "currency": "string",
  "language": "string",
  "image": "string",
  "description": "string",
  "visa_required": "boolean",
  "processing_time": "string",
  "average_cost": "number",
  "popular_season": "string"
}
```
Response: `{ "success": true, "data": CountryObject }`

**PUT /api/countries/:id**
Headers: `Authorization: Bearer <admin_token>`
Response: `{ "success": true, "data": CountryObject }`

**DELETE /api/countries/:id**
Headers: `Authorization: Bearer <admin_token>`
Response: `{ "success": true, "message": "Country deleted successfully" }`

#### üí¨ Community Endpoints

**GET /api/community**
Query: `?status=approved&country_id=1&user_id=1&sort=recent&page=1&limit=10`
Response: `{ "success": true, "data": PostObject[], "pagination": PaginationObject }`

**GET /api/community/:id**
Response: `{ "success": true, "data": PostObject }`

**POST /api/community**
Headers: `Authorization: Bearer <token>`
```json
{
  "country_id": "number (optional)",
  "title": "string",
  "content": "string",
  "image": "string (optional)",
  "rating": "number (1-5, optional)",
  "tags": "string[]"
}
```
Response: `{ "success": true, "data": PostObject }`

**PATCH /api/community/:id/status**
Headers: `Authorization: Bearer <admin_token>`
```json
{
  "status": "approved|rejected"
}
```
Response: `{ "success": true, "data": PostObject }`

**PATCH /api/community/:id/likes**
Headers: `Authorization: Bearer <token>`
```json
{
  "likes": "number",
  "dislikes": "number"
}
```
Response: `{ "success": true, "data": PostObject }`

**DELETE /api/community/:id**
Headers: `Authorization: Bearer <token|admin_token>`
Response: `{ "success": true, "message": "Post deleted successfully" }`

#### üìã Visa Applications Endpoints

**GET /api/visa-applications**
Headers: `Authorization: Bearer <token>`
Query: `?status=processing&country_id=1`
Response: `{ "success": true, "data": VisaApplicationObject[] }`

**GET /api/visa-applications/:id**
Headers: `Authorization: Bearer <token>`
Response: `{ "success": true, "data": VisaApplicationObject }`

**POST /api/visa-applications**
Headers: `Authorization: Bearer <token>`
```json
{
  "country_id": "number",
  "status": "draft|submitted",
  "current_step": "number",
  "total_steps": "number",
  "form_data": "object",
  "documents": "array"
}
```
Response: `{ "success": true, "data": VisaApplicationObject }`

**PUT /api/visa-applications/:id**
Headers: `Authorization: Bearer <token>`
Response: `{ "success": true, "data": VisaApplicationObject }`

#### üè® Hotels Endpoints

**GET /api/hotels**
Query: `?country_id=1&rating=4&price_min=50&price_max=200&page=1&limit=10`
Response: `{ "success": true, "data": HotelObject[], "pagination": PaginationObject }`

**GET /api/hotels/:id**
Response: `{ "success": true, "data": HotelObject }`

#### üçΩÔ∏è Restaurants Endpoints

**GET /api/restaurants**
Query: `?country_id=1&cuisine=french&rating=4&page=1&limit=10`
Response: `{ "success": true, "data": RestaurantObject[], "pagination": PaginationObject }`

**GET /api/restaurants/:id**
Response: `{ "success": true, "data": RestaurantObject }`

#### üèõÔ∏è Tourist Sites Endpoints

**GET /api/tourist-sites**
Query: `?country_id=1&category=monument&page=1&limit=10`
Response: `{ "success": true, "data": TouristSiteObject[], "pagination": PaginationObject }`

**GET /api/tourist-sites/:id**
Response: `{ "success": true, "data": TouristSiteObject }`

#### üìä Analytics Endpoints (Admin)

**GET /api/analytics/dashboard**
Headers: `Authorization: Bearer <admin_token>`
Response: 
```json
{
  "success": true,
  "data": {
    "users": {
      "total": "number",
      "new_this_month": "number",
      "active": "number"
    },
    "posts": {
      "total": "number",
      "pending": "number",
      "approved": "number"
    },
    "countries": {
      "total": "number",
      "most_popular": "CountryObject[]"
    },
    "visa_applications": {
      "total": "number",
      "by_status": "object"
    }
  }
}
```

#### üîç Search Endpoints

**GET /api/search**
Query: `?q=canada&type=countries|posts|all&page=1&limit=10`
Response: `{ "success": true, "data": SearchResultObject[], "pagination": PaginationObject }`

#### üè• Health Check

**GET /api/health**
Response: 
```json
{
  "success": true,
  "data": {
    "status": "healthy",
    "timestamp": "ISO_DATE",
    "database": "connected",
    "version": "1.0.0"
  }
}
```

### Mod√®les de Donn√©es (TypeScript Interfaces)

#### UserObject
```typescript
interface UserObject {
  id: number;
  name: string;
  email: string;
  role: 'user' | 'admin';
  avatar?: string;
  nationality?: string;
  current_country?: string;
  status: 'tourist' | 'worker' | 'student' | 'resident';
  preferences: {
    language: string;
    currency: string;
    notifications: boolean;
  };
  profile: {
    skills?: string[];
    experience?: string;
    field?: string;
    interests?: string[];
    travel_history?: string[];
  };
  created_at: string;
  updated_at: string;
  last_login?: string;
  is_active: boolean;
}
```

#### CountryObject
```typescript
interface CountryObject {
  id: number;
  name: string;
  code: string;
  flag: string;
  continent: string;
  capital: string;
  currency: string;
  language: string;
  image: string;
  description: string;
  visa_required: boolean;
  processing_time: string;
  average_cost: number;
  popular_season: string;
  created_at: string;
  updated_at: string;
}
```

#### PostObject
```typescript
interface PostObject {
  id: number;
  user_id: number;
  user_name: string;
  user_avatar: string;
  country_id?: number;
  country_name?: string;
  title: string;
  content: string;
  image?: string;
  status: 'pending' | 'approved' | 'rejected';
  rating?: number;
  tags: string[];
  likes: number;
  dislikes: number;
  comments_count: number;
  views: number;
  created_at: string;
  approved_at?: string;
  user_liked?: boolean;
  user_disliked?: boolean;
}
```

### Configuration Serveur

#### Variables d'Environnement (.env)
```env
# Base de donn√©es
DATABASE_URL=postgresql://user:password@host:port/database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=dora_db
DB_USER=dora_user
DB_PASSWORD=secure_password

# JWT
JWT_SECRET=your-super-secret-jwt-key-here
JWT_EXPIRES_IN=7d

# Serveur
NODE_ENV=development
PORT=3001
CORS_ORIGIN=http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# APIs Externes
GOOGLE_PLACES_API_KEY=your_key
INDEED_API_KEY=your_key
UNSPLASH_ACCESS_KEY=your_key
```

#### Structure des Dossiers Backend
```
backend/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jwt.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cors.js
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ usersController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ countriesController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ communityController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visaController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ analyticsController.js
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rateLimiting.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.js
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Country.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Post.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ VisaApplication.js
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ countries.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ community.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ visa.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ analytics.js
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authService.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ emailService.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ uploadService.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pagination.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ helpers.js
‚îÇ   ‚îî‚îÄ‚îÄ app.js
‚îú‚îÄ‚îÄ migrations/
‚îú‚îÄ‚îÄ seeds/
‚îú‚îÄ‚îÄ tests/
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ server.js
```

### S√©curit√© et Validation

#### Middleware d'Authentification
```javascript
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ success: false, message: 'Token manquant' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ success: false, message: 'Token invalide' });
    }
    req.user = user;
    next();
  });
};
```

#### Validation des Donn√©es
```javascript
const validatePost = [
  body('title').isLength({ min: 5, max: 500 }).trim().escape(),
  body('content').isLength({ min: 10, max: 5000 }).trim().escape(),
  body('rating').optional().isInt({ min: 1, max: 5 }),
  body('tags').optional().isArray({ max: 10 })
];
```

#### Rate Limiting
```javascript
const rateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // 100 requ√™tes par IP
  message: { success: false, message: 'Trop de requ√™tes' }
});
```

### Performance et Optimisation

#### Pagination Standard
```javascript
const paginate = (page = 1, limit = 10) => {
  const offset = (page - 1) * limit;
  return { limit: parseInt(limit), offset };
};
```

#### Cache Redis (optionnel)
```javascript
const redis = require('redis');
const client = redis.createClient();

const cacheMiddleware = (duration = 300) => {
  return async (req, res, next) => {
    const key = req.originalUrl;
    const cached = await client.get(key);
    
    if (cached) {
      return res.json(JSON.parse(cached));
    }
    
    res.sendResponse = res.json;
    res.json = (body) => {
      client.setex(key, duration, JSON.stringify(body));
      res.sendResponse(body);
    };
    
    next();
  };
};
```

### Scripts de D√©ploiement

#### package.json
```json
{
  "name": "dora-backend",
  "version": "1.0.0",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "migrate": "node migrations/migrate.js",
    "seed": "node seeds/seed.js",
    "test": "jest",
    "build": "echo 'No build step required'",
    "deploy": "pm2 start ecosystem.config.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.3",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "helmet": "^7.1.0",
    "cors": "^2.8.5",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "multer": "^1.4.5",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  }
}
```

Cette sp√©cification backend garantit une compatibilit√© parfaite avec le frontend DORA existant, en respectant tous les contrats d'API attendus et en fournissant une architecture robuste et scalable.